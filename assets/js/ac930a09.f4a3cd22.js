"use strict";(self.webpackChunkmgod=self.webpackChunkmgod||[]).push([[54],{3474:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=t(5893),o=t(1151);const r={title:"Basic Usage",sidebar_position:2},d=void 0,i={id:"beginners-guide/basic_usage",title:"Basic Usage",description:"Add tags (wherever applicable) in existing struct (or define a new model).",source:"@site/../docs/beginners-guide/basic_usage.md",sourceDirName:"beginners-guide",slug:"/beginners-guide/basic_usage",permalink:"/mgod/docs/beginners-guide/basic_usage",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Basic Usage",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/mgod/docs/beginners-guide/installation"},next:{title:"Schema Options",permalink:"/mgod/docs/features/schema_options"}},a={},c=[];function l(e){const n={code:"code",em:"em",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Add tags ",(0,s.jsx)(n.em,{children:"(wherever applicable)"})," in existing struct ",(0,s.jsx)(n.em,{children:"(or define a new model)"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'type User struct {\n\tName     string\n\tEmailID  string `bson:"emailId"`\n\tAge      *int32 `bson:",omitempty"`\n\tJoinedOn string `bson:"joinedOn" mgoType:"date"`\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"mgod"})," to get the entity ODM."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'import (\n\t"github.com/Lyearn/mgod"\n\t"github.com/Lyearn/mgod/schema/schemaopt"\n)\n\nmodel := User{}\nschemaOpts := schemaopt.SchemaOptions{\n\tCollection: "users",\n\tTimestamps: true,\n}\n\n// dbConn is the database connection obtained using Go Mongo Driver\'s Connect method.\nuserModelOpts := mgod.NewEntityMongoOptions(dbConn, schemaOpts)\nuserModel, _ := mgod.NewEntityMongoModel(model, *userModelOpts)\n'})}),"\n",(0,s.jsx)(n.p,{children:"Use the entity ODM to perform CRUD operations with ease."}),"\n",(0,s.jsx)(n.p,{children:"Insert a new document."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'joinedOn, _ := dateformatter.New(time.Now()).GetISOString()\nuserDoc := User{\n\tName: "Gopher",\n\tEmailID: "gopher@mgod.com",\n\tJoinedOn: joinedOn,\n}\nuser, _ := userModel.InsertOne(context.TODO(), userDoc)\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n\t"_id": ObjectId("65697705d4cbed00e8aba717"),\n\t"name": "Gopher",\n\t"emailId": "gopher@mgod.com",\n\t"joinedOn": ISODate("2023-12-01T11:32:19.290Z"),\n\t"createdAt": ISODate("2023-12-01T11:32:19.290Z"),\n\t"updatedAt": ISODate("2023-12-01T11:32:19.290Z"),\n\t"__v": 0\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice how ",(0,s.jsx)(n.code,{children:"_id"}),", ",(0,s.jsx)(n.code,{children:"createdAt"}),", ",(0,s.jsx)(n.code,{children:"updatedAt"})," and ",(0,s.jsx)(n.code,{children:"__v"})," fields are added automatically."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Find documents using model properties."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'users, _ := userModel.Find(context.TODO(), bson.M{"name": userDoc.Name})\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'[]User{\n\tUser{\n\t\tName: "Gopher",\n\t\tEmailID: "gopher@mgod.com",\n\t\tJoinedOn: "2023-12-01T11:32:19.290Z",\n\t}\n  }\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Update document properties."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'result, _ := userModel.UpdateMany(context.TODO(), bson.M{"joinedOn": bson.M{"$gte": "2023-12-01T00:00:00.000Z"}}, bson.M{"$inc": {"__v": 1}})\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"mongo.UpdateResult{\n\tMatchedCount: 1,\n\tModifiedCount: 1,\n\tUpsertedCount: 0,\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'// User Doc\n{\n\t"_id": ObjectId("65697705d4cbed00e8aba717"),\n\t"name": "Gopher",\n\t"emailId": "gopher@mgod.com",\n\t"joinedOn": ISODate("2023-12-01T11:32:19.290Z"),\n\t"createdAt": ISODate("2023-12-01T11:32:19.290Z"),\n\t"updatedAt": ISODate("2023-12-02T10:40:00.670Z"),\n\t"__v": 1\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Notice the updation of the ",(0,s.jsx)(n.code,{children:"updatedAt"})," field."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Remove documents matching certain or all model properties."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'result, _ := userModel.DeleteMany(context.TODO(), bson.M{"name": userDoc.Name})\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Output:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:"mongo.DeleteResult{\n\tDeletedCount: 1\n  }\n"})})]})}function g(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>i,a:()=>d});var s=t(7294);const o={},r=s.createContext(o);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);